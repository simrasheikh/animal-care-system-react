-- TABLES

CREATE TABLE staff (
    staff_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    -- role VARCHAR2(20) NOT NULL,
    phone_number VARCHAR2(15) UNIQUE,
    email VARCHAR2(100) UNIQUE,
    password VARCHAR2(100) NOT NULL
);

CREATE TABLE animals (
    animal_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    animal_name VARCHAR2(50) NOT NULL,
    species VARCHAR2(50) NOT NULL,
    breed VARCHAR2(50) DEFAULT 'Unknown',
    age NUMBER CHECK (age >= 0),
    gender VARCHAR2(10), 
    CONSTRAINT gender_check CHECK (gender in ('Male', 'Female')),
    weight NUMBER(10,2),
    status VARCHAR2(20) DEFAULT 'Available',
    intake_date DATE DEFAULT SYSDATE,
    description VARCHAR2(255),
    photo_url VARCHAR2(255)
);

CREATE TABLE owners (
    owner_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    owner_name VARCHAR2(100) NOT NULL,    
    username VARCHAR2(100) NOT NULL UNIQUE,
    phone_number VARCHAR2(15),
    email VARCHAR2(100) NOT NULL UNIQUE,
    password VARCHAR2(100) NOT NULL
);

CREATE TABLE adoption_applications (
    adoption_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    animal_id NUMBER NOT NULL,
    CONSTRAINT fk_animal FOREIGN KEY (animal_id) REFERENCES Animals (animal_id) ON DELETE CASCADE,
    owner_id NUMBER NOT NULL,
    CONSTRAINT fk_owner FOREIGN KEY (owner_id) REFERENCES Owners (owner_id) ON DELETE CASCADE,
    adoption_date DATE DEFAULT SYSDATE,
    status VARCHAR2(20) DEFAULT 'Pending'
);

CREATE TABLE vets (
    vet_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    image_url VARCHAR2(255),
    phone_number VARCHAR2(15) UNIQUE,
    email VARCHAR2(100)
);

CREATE TABLE appointments (
    Appointment_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique identifier for each appointment
    Vet_ID NUMBER NOT NULL, -- ID of the veterinarian
    Owner_ID NUMBER NOT NULL, -- ID of the pet owner
    Appointment_Date_Time DATE NOT NULL,
    -- Appointment_Time VARCHAR2(255) NOT NULL, 
    Notes VARCHAR2(255), -- Optional field for additional details about the appointment
    CONSTRAINT fk_vet_apt FOREIGN KEY (Vet_ID) REFERENCES Vets(Vet_ID), -- Foreign key referencing Vets table
    CONSTRAINT fk_owner_apt FOREIGN KEY (Owner_ID) REFERENCES Owners(Owner_ID) -- Foreign key referencing Owners table
);


CREATE OR REPLACE TRIGGER update_animal_status_after_approved_adoption
FOR UPDATE OF status ON adoption_applications
COMPOUND TRIGGER

   -- Declare a collection to store adoption IDs and animal IDs
   TYPE adoption_data_t IS TABLE OF NUMBER;
   approved_adoption_ids adoption_data_t := adoption_data_t();
   approved_animal_ids adoption_data_t := adoption_data_t();

   AFTER EACH ROW IS
   BEGIN
      IF :NEW.status = 'Approved' AND :OLD.status = 'Pending' THEN
         -- Store the relevant adoption ID and animal ID
         approved_adoption_ids.EXTEND;
         approved_adoption_ids(approved_adoption_ids.COUNT) := :NEW.adoption_id;

         approved_animal_ids.EXTEND;
         approved_animal_ids(approved_animal_ids.COUNT) := :NEW.animal_id;

         -- Update the animals table immediately
         UPDATE animals
         SET status = 'Adopted'
         WHERE animal_id = :NEW.animal_id;
      END IF;
   END AFTER EACH ROW;

   AFTER STATEMENT IS
   BEGIN
      -- Process all collected IDs to update other adoption applications
      FOR i IN 1..approved_animal_ids.COUNT LOOP
         UPDATE adoption_applications
         SET status = 'Denied'
         WHERE animal_id = approved_animal_ids(i)
           AND status = 'Pending'
           AND adoption_id != approved_adoption_ids(i);
      END LOOP;
   END AFTER STATEMENT;

END update_animal_status_after_approved_adoption;
/

CREATE OR REPLACE VIEW adoption_application_details AS
SELECT 
    a.ADOPTION_ID,
    o.owner_id,
    an.animal_id,
    o.OWNER_NAME,
    an.ANIMAL_NAME,
    a.ADOPTION_DATE,
    a.STATUS
FROM 
    adoption_applications a
JOIN 
    owners o 
ON 
    a.OWNER_ID = o.OWNER_ID
JOIN 
    animals an 
ON 
    a.ANIMAL_ID = an.ANIMAL_ID;


CREATE OR REPLACE VIEW available_animals AS
SELECT 
    animal_id, animal_name, species, breed, age, gender, weight, status, description, photo_url
FROM 
    Animals
WHERE 
    status = 'Available';
