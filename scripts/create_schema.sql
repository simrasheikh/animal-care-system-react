-- TABLES
-- drop table staff;
CREATE TABLE staff (
    staff_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    -- role VARCHAR2(20) NOT NULL,
    phone_number VARCHAR2(15) UNIQUE,
    email VARCHAR2(100) UNIQUE,
    password VARCHAR2(100) NOT NULL
);
-- drop table animals;
CREATE TABLE animals (
    animal_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    animal_name VARCHAR2(50) NOT NULL,
    species VARCHAR2(50) NOT NULL,
    breed VARCHAR2(50) DEFAULT 'Unknown',
    age NUMBER CHECK (age >= 0),
    gender VARCHAR2(10), 
    CONSTRAINT gender_check CHECK (gender in ('Male', 'Female')),
    weight NUMBER(10,2),
    status VARCHAR2(20) DEFAULT 'Available',
    intake_date DATE DEFAULT SYSDATE,
    description VARCHAR2(255),
    photo_url VARCHAR2(255)
);
-- drop table owners;
CREATE TABLE owners (
    owner_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    owner_name VARCHAR2(100) NOT NULL,    
    username VARCHAR2(100) NOT NULL UNIQUE,
    phone_number VARCHAR2(15),
    email VARCHAR2(100) NOT NULL UNIQUE,
    password VARCHAR2(100) NOT NULL
);
-- drop table adoption_applications;
CREATE TABLE adoption_applications (
    adoption_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    animal_id NUMBER NOT NULL,
    CONSTRAINT fk_animal FOREIGN KEY (animal_id) REFERENCES Animals (animal_id) ON DELETE CASCADE,
    owner_id NUMBER NOT NULL,
    CONSTRAINT fk_owner FOREIGN KEY (owner_id) REFERENCES Owners (owner_id) ON DELETE CASCADE,
    adoption_date DATE DEFAULT SYSDATE,
    status VARCHAR2(20) DEFAULT 'Pending'
);
-- drop table vets;
CREATE TABLE vets (
    vet_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    image_url VARCHAR2(255),
    phone_number VARCHAR2(15) UNIQUE,
    email VARCHAR2(100)
);
-- drop table appointments;
CREATE TABLE appointments (
    Appointment_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique identifier for each appointment
    Vet_ID NUMBER NOT NULL, -- ID of the veterinarian
    Owner_ID NUMBER NOT NULL, -- ID of the pet owner
    Appointment_Date DATE NOT NULL, -- Date of the appointment
    Appointment_Time VARCHAR2(255) NOT NULL, -- Time of the appointment as a string
    Notes VARCHAR2(255), -- Optional field for additional details about the appointment
    CONSTRAINT fk_vet_apt FOREIGN KEY (Vet_ID) REFERENCES Vets(Vet_ID), -- Foreign key referencing Vets table
    CONSTRAINT fk_owner_apt FOREIGN KEY (Owner_ID) REFERENCES Owners(Owner_ID) -- Foreign key referencing Owners table
);

--TRIGGERS

-- -- change animal status, also deny any other pending applications for the same animal
-- CREATE OR REPLACE TRIGGER update_animal_status_after_approved_adoption    
-- AFTER UPDATE OF status ON adoption_applications
-- FOR EACH ROW
-- BEGIN
--     IF :NEW.status = 'Approved' AND :OLD.status = 'Pending' THEN
--         UPDATE animals
--         SET status = 'Adopted'
--         WHERE animal_id = :NEW.animal_id;

--         UPDATE adoption_applications
--         SET status = 'Denied'
--         WHERE animal_id = :NEW.animal_id AND status = 'Pending' AND adoption_id != :NEW.adoption_id;
--     END IF;
-- END;
-- /

CREATE OR REPLACE TRIGGER update_animal_status_after_approved_adoption
FOR UPDATE OF status ON adoption_applications
COMPOUND TRIGGER

   -- Declare a collection to store adoption IDs and animal IDs
   TYPE adoption_data_t IS TABLE OF NUMBER;
   approved_adoption_ids adoption_data_t := adoption_data_t();
   approved_animal_ids adoption_data_t := adoption_data_t();

   AFTER EACH ROW IS
   BEGIN
      IF :NEW.status = 'Approved' AND :OLD.status = 'Pending' THEN
         -- Store the relevant adoption ID and animal ID
         approved_adoption_ids.EXTEND;
         approved_adoption_ids(approved_adoption_ids.COUNT) := :NEW.adoption_id;

         approved_animal_ids.EXTEND;
         approved_animal_ids(approved_animal_ids.COUNT) := :NEW.animal_id;

         -- Update the animals table immediately
         UPDATE animals
         SET status = 'Adopted'
         WHERE animal_id = :NEW.animal_id;
      END IF;
   END AFTER EACH ROW;

   AFTER STATEMENT IS
   BEGIN
      -- Process all collected IDs to update other adoption applications
      FOR i IN 1..approved_animal_ids.COUNT LOOP
         UPDATE adoption_applications
         SET status = 'Denied'
         WHERE animal_id = approved_animal_ids(i)
           AND status = 'Pending'
           AND adoption_id != approved_adoption_ids(i);
      END LOOP;
   END AFTER STATEMENT;

END update_animal_status_after_approved_adoption;
/


-- CREATE OR REPLACE TRIGGER prevent_duplicate_adoption
-- BEFORE INSERT ON Adoptions
-- FOR EACH ROW
-- DECLARE
--     v_status VARCHAR2(20);
-- BEGIN
--     -- Check if the animal exists and retrieve its status
--     BEGIN
--         SELECT status INTO v_status
--         FROM Animals
--         WHERE animal_id = :NEW.animal_id;

--         -- If the animal is already adopted, raise an error
--         IF v_status = 'Adopted' THEN
--             RAISE_APPLICATION_ERROR(-20001, 'This animal is already adopted.');
--         END IF;

--     EXCEPTION
--         WHEN NO_DATA_FOUND THEN
--             -- Handle case where animal_id does not exist in Animals table
--             RAISE_APPLICATION_ERROR(-20002, 'Animal ID does not exist.');
--     END;
-- END;

-- CREATE OR REPLACE TRIGGER set_approval_date
-- BEFORE UPDATE ON Adoptions
-- FOR EACH ROW
-- BEGIN
--     IF :NEW.status = 'Approved' AND :OLD.status != 'Approved' THEN
--         :NEW.approval_date := SYSDATE;
--     END IF;
-- END;

-- CREATE OR REPLACE TRIGGER reset_animal_status_after_adoption_deletion
-- AFTER DELETE ON Adoptions
-- FOR EACH ROW
-- BEGIN
--     UPDATE Animals
--     SET status = 'Available'
--     WHERE animal_id = :OLD.animal_id;
-- END;

-- CREATE OR REPLACE TRIGGER validate_donation_amount
-- BEFORE INSERT OR UPDATE ON Donations
-- FOR EACH ROW
-- BEGIN
--     IF :NEW.amount <= 0 THEN
--         RAISE_APPLICATION_ERROR(-20002, 'Donation amount must be positive.');
--     END IF;
-- END;

-- CREATE OR REPLACE TRIGGER update_animal_health_status
-- AFTER INSERT ON MedicalRecords
-- FOR EACH ROW
-- BEGIN
--     UPDATE Animals
--     SET health_status = 'Updated medical record available'
--     WHERE animal_id = :NEW.animal_id;
-- END;

--VIEWS

CREATE OR REPLACE VIEW adoption_application_details AS
SELECT 
    a.ADOPTION_ID,
    o.owner_id,
    an.animal_id,
    o.OWNER_NAME,
    an.ANIMAL_NAME,
    a.ADOPTION_DATE,
    a.STATUS
FROM 
    adoption_applications a
JOIN 
    owners o 
ON 
    a.OWNER_ID = o.OWNER_ID
JOIN 
    animals an 
ON 
    a.ANIMAL_ID = an.ANIMAL_ID;


CREATE OR REPLACE VIEW available_animals AS
SELECT 
    animal_id, animal_name, species, breed, age, gender, weight, status, description, photo_url
FROM 
    Animals
WHERE 
    status = 'Available';

-- CREATE OR REPLACE VIEW recently_adopted_animals AS
-- SELECT 
--     a.animal_id, a.name, a.species, a.breed, ad.adoption_date, ad.approval_date, ad.owner_id
-- FROM 
--     Animals a
-- JOIN 
--     Adoptions ad ON a.animal_id = ad.animal_id
-- WHERE 
--     ad.adoption_date >= SYSDATE - 30;

-- CREATE OR REPLACE VIEW pending_adoptions AS
-- SELECT 
--     ad.adoption_id, an.name AS animal_name, adp.name AS owner_name, ad.status
-- FROM 
--     Adoptions ad
-- JOIN 
--     Animals an ON ad.animal_id = an.animal_id
-- JOIN 
--     Owners adp ON ad.owner_id = adp.owner_id
-- WHERE 
--     ad.status = 'Pending';

-- CREATE OR REPLACE VIEW recent_donations AS
-- SELECT 
--     donor_name, amount, donation_date, purpose
-- FROM 
--     Donations
-- WHERE 
--     donation_date >= SYSDATE - 30;

-- CREATE OR REPLACE VIEW adoption_statistics AS
-- SELECT 
--     a.species, COUNT(ad.adoption_id) AS total_adoptions, 
--     SUM(CASE WHEN ad.status = 'Approved' THEN 1 ELSE 0 END) AS approved_adoptions,
--     SUM(CASE WHEN ad.status = 'Pending' THEN 1 ELSE 0 END) AS pending_adoptions
-- FROM 
--     Animals a
-- JOIN 
--     Adoptions ad ON a.animal_id = ad.animal_id
-- GROUP BY 
--     a.species;

-- CREATE OR REPLACE VIEW donor_contributions AS
-- SELECT 
--     donor_name, COUNT(donation_id) AS total_donations, SUM(amount) AS total_contributed
-- FROM 
--     Donations
-- GROUP BY 
--     donor_name;

--PROCEDURES

-- CREATE OR REPLACE PROCEDURE approve_adoption(p_adoption_id IN NUMBER)
-- AS
-- BEGIN
--     UPDATE Adoptions
--     SET status = 'Approved', approval_date = SYSDATE
--     WHERE adoption_id = p_adoption_id AND status = 'Pending';

--     -- Trigger will handle updating the animal's status to 'Adopted'
--     COMMIT;
-- END;

-- CREATE OR REPLACE PROCEDURE reject_adoption(p_adoption_id IN NUMBER, p_reason IN VARCHAR2)
-- AS
-- BEGIN
--     UPDATE Adoptions
--     SET status = 'Rejected', rejection_reason = p_reason
--     WHERE adoption_id = p_adoption_id AND status = 'Pending';

--     COMMIT;
-- END;

-- CREATE OR REPLACE PROCEDURE add_animal(
--     p_name IN VARCHAR2,
--     p_species IN VARCHAR2,
--     p_breed IN VARCHAR2,
--     p_age IN NUMBER,
--     p_description IN varchar2,
--     p_photo_url IN varchar2
-- )
-- AS
-- BEGIN
--     INSERT INTO Animals (name, species, breed, age, description, photo_url)
--     VALUES (p_name, p_species, p_breed, p_age, p_description, p_photo_url);

--     COMMIT;
-- END;

-- CREATE OR REPLACE PROCEDURE add_donation(
--     p_donor_name IN VARCHAR2,
--     p_amount IN NUMBER,
--     p_purpose IN varchar2
-- )
-- AS
-- BEGIN
--     INSERT INTO Donations (donor_name, amount, donation_date, purpose)
--     VALUES (p_donor_name, p_amount, SYSDATE, p_purpose);

--     COMMIT;
-- END;

-- CREATE OR REPLACE PROCEDURE assign_staff_to_animal(
--     p_animal_id IN NUMBER,
--     p_staff_id IN NUMBER,
--     p_responsibility_type IN VARCHAR2
-- )
-- AS
-- BEGIN
--     INSERT INTO Animal_Staff (animal_id, staff_id, responsibility_type)
--     VALUES (p_animal_id, p_staff_id, p_responsibility_type);

--     COMMIT;
-- END;
